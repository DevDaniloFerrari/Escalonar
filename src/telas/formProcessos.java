
package telas;

import base.Escalonador;
import base.Processo;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Entrada ou aleração de dados de processos pela interface gráfica
 * @author Emerson dos Santos Paduan
 * @version 1.0
 * @since 09/12/2010
 */

public class formProcessos extends javax.swing.JDialog {
    ArrayList<Processo> listaPrin;

    /** Cria um novo formulário formProcessos.
     * A lista de processos será nula nesse caso.
     */
    public formProcessos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        listaPrin = null;
        initComponents();
    }

    /**
     * Sobrecarga do construtor padrão de JDialog para passar como parâmentro
     * a lista de processos que está sendo manipulada na interfce principal.
     * Quando a lista é alterada ela se torna a lista padrão na interface
     * principal, desde que tenha sido validada corretamente.
     * @param parent : formulário Principal
     * @param modal : true/false para indicar se é modal
     * @param lista : lista de processos da interface principal
     */

    public formProcessos(java.awt.Frame parent, boolean modal, ArrayList lista) {
        super(parent, modal);
        initComponents();
        listaPrin = lista;
        //preenche a tabela com os processos carregados na interface principal
        if(lista!= null && !listaPrin.isEmpty())
        {
            for(Processo p:listaPrin)
            {
                tabelaInput.setValueAt(p.getId(), tabelaInput.getRowCount()-1, 0);
                tabelaInput.setValueAt(p.getChegada(), tabelaInput.getRowCount()-1, 1);
                tabelaInput.setValueAt(p.getDuracao(), tabelaInput.getRowCount()-1, 2);
                tabelaInput.setValueAt(p.getPrioridade(), tabelaInput.getRowCount()-1, 3);
                ((DefaultTableModel)tabelaInput.getModel()).addRow(new Object [4] );
            }
            ((DefaultTableModel)tabelaInput.getModel()).removeRow(tabelaInput.getRowCount()-1);
        }

    }
    /* This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaInput = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("telas/Principal"); // NOI18N
        setTitle(bundle.getString("DIGITAÇÃO DOS PROCESSOS:")); // NOI18N
        setAlwaysOnTop(true);
        setResizable(false);
        setUndecorated(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 12));
        java.util.ResourceBundle bundle1 = java.util.ResourceBundle.getBundle("telas/Principal"); // NOI18N
        jLabel1.setText(bundle1.getString("DIGITAÇÃO DOS PROCESSOS:")); // NOI18N

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setName("tblProcessos"); // NOI18N

        tabelaInput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"P1", "", "", ""}
            },
            new String [] {
                "Processo", "Chegada", "Duração", "Prioridade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaInput.setCellSelectionEnabled(true);
        tabelaInput.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaInput);

        jButton1.setLabel(bundle1.getString("INSERIR")); // NOI18N
        jButton1.setName("btnInserir"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setLabel(bundle1.getString("REMOVER")); // NOI18N
        jButton2.setName("btnRemover"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setLabel(bundle1.getString("OK")); // NOI18N
        jButton3.setName("btnOK"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(bundle1.getString("CANCELAR")); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jButton3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, 0, 0, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-406)/2, (screenSize.height-301)/2, 406, 301);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int c,d,p;

        //todos os procesos foram apagados
        if(tabelaInput.getRowCount() == 0)
        {
            listaPrin.removeAll(listaPrin);
            this.dispose();
            return;
        }
        ArrayList<Processo> lista = new ArrayList<>();
        //carrega os dados da tabela para uma lista de processos
        for(int i = 0; i< tabelaInput.getRowCount();i++)
        {
            try{
                c = Integer.parseInt(tabelaInput.getValueAt(i, 1).toString());
                d = Integer.parseInt(tabelaInput.getValueAt(i, 2).toString());
                p = Integer.parseInt(tabelaInput.getValueAt(i, 3).toString());
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("telas/Principal").getString("DADOS DE ENTRADA INVÁLIDOS."), java.util.ResourceBundle.getBundle("telas/Principal").getString("ERRO"), JOptionPane.ERROR_MESSAGE);
                return;
            }
            lista.add(new Processo(java.util.ResourceBundle.getBundle("telas/Principal").getString("P")+(i+1),c, d, p));
        }
        //valida a lista obtida da interface antes de tornar a lista atual
        if(Escalonador.validaEntrada(lista))
        {
            if(listaPrin != null && !listaPrin.isEmpty())
                listaPrin.removeAll(listaPrin);
            
            for(Processo pc:lista)
                listaPrin.add(pc);
            this.dispose();
        }
        else
            JOptionPane.showMessageDialog(this, java.util.ResourceBundle.getBundle("telas/Principal").getString("DADOS DE ENTRADA INVÁLIDOS."), java.util.ResourceBundle.getBundle("telas/Principal").getString("ERRO"), JOptionPane.ERROR_MESSAGE);
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ((DefaultTableModel)tabelaInput.getModel()).addRow(new Object [4] );
        tabelaInput.setValueAt(java.util.ResourceBundle.getBundle("telas/Principal").getString("P")+(tabelaInput.getRowCount()), tabelaInput.getRowCount()-1, 0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(tabelaInput.getSelectedRow() != -1)
            ((DefaultTableModel) tabelaInput.getModel()).removeRow(tabelaInput.getSelectedRow());
    }//GEN-LAST:event_jButton2ActionPerformed

    /*
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                formProcessos dialog = new formProcessos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaInput;
    // End of variables declaration//GEN-END:variables

}
